- hosts: all
  gather_facts: false
  vars:
    input: &input
      hostname: "{{ na_clustermanagement }}"
      username: "{{ na_username }}"
      password: "{{ na_password }}"
      https:          true
      validate_certs: false
  collections:
    - netapp.ontap
  connection: local

  tasks:
  - name: Get Ontap Info
    na_ontap_info:
      state: info
      gather_subset:
        - vserver_info
        - net_interface_info
        - net_dns_info
        - cifs_server_info
        - nfs_info
        - iscsi_service_info
      <<: *input
    register: netapp
    tags: always

  - name: debug vservers found
    debug:
      var: netapp
    tags: never,debug

  # - name: HANNES DEMO
  #   debug:
  #     msg: "{{vservers |map(attribute='name') | list}}"
  #   tags: never,debug

  # - meta: end_play
  
  - name: debug SVM layout
    debug:
      var: vservers
    tags: nerver,debug

  # - name: Construct the SVM model_
  #   debug: 
  #     msg: 
  #       - "name: {{ netapp.ontap_info.vserver_info[item].vserver_name }}"
  #       - "protocols: {{netapp.ontap_info.vserver_info[item].disallowed_protocols.protocol}}"
  #       - "language: {{netapp.ontap_info.vserver_info[item].language}}"
  #   with_items:
  #     "{{ netapp.ontap_info.vserver_info }}"
  #   when:
  #     netapp.ontap_info.vserver_info[item].vserver_type == "data"


  - name: Construct the SVM model
    set_fact: 
      vservers_found: "{{ (vservers_found  |default([]))  
                              + [ { 'name': netapp.ontap_info.vserver_info[item].vserver_name, 
                                    'language': netapp.ontap_info.vserver_info[item].language,
                                    'protocols': (netapp.ontap_info.vserver_info[item].allowed_protocols.protocol | list),
                                    'root_volume_security_style': netapp.ontap_info.vserver_info[item].root_volume_security_style,
                                    'snapshot_policy': netapp.ontap_info.vserver_info[item].snapshot_policy   } ] }}"
    loop:
      "{{ netapp.ontap_info.vserver_info | flatten }}"
    when:
      - netapp.ontap_info.vserver_info[item].vserver_type == "data"
      - netapp.ontap_info.vserver_info[item].vserver_name not in vservers |map(attribute='name') | list     # Check if a Vserver exists on the cluster but not it the inventory
    tags: always

  - name: debug SVM layout
    debug:
      var: vservers_found
    tags: never,debug

  # plan to add them to the vserver var

  - name: Adding to the VAR
    set_fact:
      vservers2: "{{vservers}} + {{item}} "
    loop: "{{vservers_found}}"
    tags: always

  - name: show me
    debug:
      var: vservers2
    tags: debug,never

  - copy: 
      content="{{ vservers2 | to_nice_yaml( width=50, explicit_start=True, explicit_end=True, ident=2) }}" 
      dest=hannes.yaml


